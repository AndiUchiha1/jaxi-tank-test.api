type Query {
  accountLogIn(user: LogInInput!): SessionInfo!
  getProyects(token: String!): getProyectsQueryInfo!
  getContacts(token: String! ): getContactsQueryInfo!
}

type Mutation {
  createUser(user: UserInput!): accountCreationData!  
}

type Users {
  _id: ID!
  userName: String!
  avatar: String
  email: String!
  password: String!
  createdAt: String!
  updatedAt: String!
}

input LogInInput {
  email: String!
  password: String!
}

input UserInput {
  userName: String!
  email: String!
  avatar: String
  password: String!
}

type SessionInfo {
  userId: ID!
  token: String!
  avatar: String!
  tokenExpiration: Int!
  err: Error
}

type UserContact {
  email: String!
  avatar: String!  
}

type accountCreationData {  
  hasCreated: Boolean!
  err: Error
}

type Proyects {
  _id: ID!
  title: String!
  creator: Users!
  members: [ProyectMembers!]!
  tasks: [Tasks!]
  startAt: String
  endsAt: String
  createdAt: String!
  updatedAt: String!
}

input ProyectsInput {
  token: String!
  title: String!
  creator: String!  
  startAt: String
  endsAt: String
}

type ProyectMembers {
  email: String!
  avatar: String!
  role: String!  
}

type getProyectsQueryInfo {
  Proyects: [Proyects]
  err: Error
}

type Tasks {
  _id: ID!
  title: String!
  members: [ProyectMembers]
  startAt: String
  endsAt: String
  createdAt: String!
  updatedAt: String!
}

input TasksInput {
  token: String!
  title: String!
  startAt: String
  endsAt: String
}

type getTasksQueryInfo {
  tasks: [Tasks]
  err: Error
}

input contactsInput {
  token: String!
  email: String! 
}

input getContactsInput {
  token: String!
  user: String!
}

type getContactsQueryInfo {
  contacts: [UserContact!] 
  err: Error
}

type Error {
  errorCode: Int!
  errorDesc: String!
}